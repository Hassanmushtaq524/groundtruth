[{"commit_id": "b9b94e120e781167b1b50ae4c1f5a29d1551fba7", "commit_message": "Update cron.ts", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nHere is the description:\n\nThis file, `cron.ts`, appears to be a TypeScript definition for a `CronJobParams` type in a Node.js package. The changes are minor and seem to be related to adding a comment to highlight the purpose of a `context` property. The updated comment includes the phrase \"WHAT ARE WE DOING HERE\", suggesting a development team is exploring or re-evaluating the role of the `context` property in a cron job.", "doc_updates": "Monitor `monitor_config` parameters:\n\n`schedule_type`:\n\nThe schedule representation for your monitor, either `crontab` or `interval`.\n\n`schedule`:\n\nThe job's schedule :\n\nThis is an object specifying a `schedule_type` of either `crontab` or `interval`. The structure will vary depending on the type:\n\n```json\n{\"type\": \"crontab\", \"value\": \"0 * * * *\"}\n{\"type\": \"interval\", \"value\": \"2\", \"unit\": \"hour\"}\n```\n\n`checkin_margin`:\n\nThe amount of time (in minutes) Sentry should wait for your check-in before it's considered missed (\"grace period\"). Optional.\n\n<Note>\n\nWe recommend that your check-in margin be less than or equal to your interval.\n\n</Note>\n\n`max_runtime`:\n\nThe amount of time (in minutes) your job is allowed to run before it's considered failed. Optional.\n\n`context`:\n\nAn optional parameter that can be used to pass additional context which might be useful for executing the cron job. This may include configurations or references needed during execution. Note that the usage of this parameter is currently under development.\n\n`failure_issue_threshold`:\n\nThe number of consecutive failed check-ins it takes before an issue is created. Optional.\n\n`recovery_threshold`:\n\nThe number of consecutive OK check-ins it takes before an issue is resolved. Optional.\n\n`timezone`\n\nThe `tz` where your job is running. This is usually your server's timezone, (such as `America/Los_Angeles`). See [list of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). Optional.\n\n<Alert level=\"warning\">\n\nIt's important to provide a timezone for non-repeating crontab schedules, such as `0 17 * * *` (every day at 5pm).\n\n</Alert>"}, {"commit_id": "9e8fbc8f2b0b9f44c4b5f998fa1399dcf3037fcf", "commit_message": "Update cron.ts", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nThis patch changes the type definition of `CronJobParams` in the `cron.ts` file within the `node` package. The changes involve modifying the optional parameters, specifically the `context` property, which is now allowed to be `unknown`. This modification could potentially impact how cron jobs are initialized, ran, or cancelled. The context might be used for error handling, logging, or data processing within the cron job lifecycle.", "doc_updates": "## Requirements\n\nTo begin monitoring your recurring, scheduled job:\n\n1. [Create a new monitor](https://sentry.io/crons/create/) in Sentry.\n2. Configure check-ins or a heartbeat for your job.\n\nOptionally, you can skip the first step and [create or update (upsert) a monitor through a check-in](#creating-or-updating-a-monitor-through-a-check-in-optional). See more below.\n\n### Specifying monitor environments (Optional)\n\nWhen sending check-ins to your monitor you may specify the `environment` of the\ncheck-in. This allows you to monitor a single schedule across multiple\nenvironments.\n\nIf you don't specify an environment with your check-ins the default is `production`.\n\n<Alert level=\"info\">\n\nMonitor environments are still early in development. Currently, after a check-in\noccurs for a specific environment, you must continue sending check-ins on\nschedule or delete the monitor environment; otherwise, it will be marked as missed.\n\n</Alert>\n\n### Creating or Updating a Monitor Through a Check-In (Optional)\n\nSentry enables the automatic creation or update of a monitor (upsert) through the check-in payload. This can be useful if you have many scheduled tasks or need to create them dynamically."}, {"commit_id": "03d57ce16c26caa5c3b77f2cf245f119e7c99a4c", "commit_message": "Add heartbeat param", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\n\"Maintenance update to `CronJobParams` type in `cron.ts` file. The `setHeartbeat` parameter was added to allow optional heartbeat functionality when initializing the `CronJob` object. This change aims to enhance the performance and monitoring capabilities of Node.js cron jobs in Sentry.io, allowing for more granular tracking and management of job execution.\"", "doc_updates": "### Specifying monitor environments (Optional)\n\nWhen sending check-ins to your monitor you may specify the `environment` of the\ncheck-in. This allows you to monitor a single schedule across multiple\nenvironments.\n\nIf you don't specify an environment with your check-ins the default is `production`.\n\n<Alert level=\"info\">\n\nMonitor environments are still early in development. Currently, after a check-in\noccurs for a specific environment, you must continue sending check-ins on\nschedule or delete the monitor environment; otherwise, it will be marked as missed.\n\n</Alert>\n\n### New Parameter: setHeartbeat (Optional)\n\nThe `CronJobParams` has been updated to include an optional parameter called `setHeartbeat`. This parameter, when set to true, initializes heartbeat monitoring for the scheduled job.\n\n```ts\nexport type CronJobParams = {\n   onTick: (context: unknown, onComplete?: unknown) => void | Promise<void>;\n   onComplete?: () => void | Promise<void>;\n   start?: boolean | null; \n   setHeartbeat?: boolean | null; // add an optional param for a heartbeat when initializing the object\n   context?: unknown; \n   runOnInit?: boolean | null;\n   unrefTimeout?: boolean | null;\n}\n```"}, {"commit_id": "8f20ddddd6ddedb1fa486f32c91c1ac0eb097ab9", "commit_message": "Update cron.ts", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nThis commit updates the `CronJobParams` type in the `cron.ts` file, within the `packages/node/src/cron` directory. The changes add an optional `runOnInit` parameter, which appears to be another configurable option for cron job initialization. The purpose of this change likely aims to enhance the flexibility and customization of the cron job functionality in Sentry's Node.js implementation.", "doc_updates": "### Heartbeat\n\nHeartbeat monitoring notifies Sentry of a job's status through one check-in. This setup will only notify you if your job didn't start when expected (missed). If you need to track a job to see if it exceeded its maximum runtime (failed), use check-ins instead.\n\nWhen initializing a cron job, you can optionally specify the `setHeartbeat` parameter to enable heartbeat monitoring for that job.\n\n```bash {tabTitle: cURL}\nSENTRY_INGEST=\"https://___ORG_INGEST_DOMAIN___\"\nSENTRY_CRONS=\"${SENTRY_INGEST}/api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/\"\n\n# \ud83d\udfe2 Notify Sentry your job has completed successfully:\ncurl \"${SENTRY_CRONS}?status=ok\"\n```\n\n```http {tabTitle: HTTP}\nGET /api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/?status=ok HTTP/1.1\nHost: ___ORG_INGEST_DOMAIN___\n```"}, {"commit_id": "d352363a7c247adaac564a46e2438b613bb19753", "commit_message": "Update cron.ts", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nThis change is related to the Node.js implementation of the Cron Job management system, specifically modifying the type of CronJobParams. The updated definition includes new optional parameters, such as `setHeartbeat` and `runOnInit`, which allows for more granular control over the cron job's behavior. The `context` parameter is also updated, suggesting flexibility in handling cron job tasks.", "doc_updates": "## Requirements\n\nTo begin monitoring your recurring, scheduled job:\n\n1. [Create a new monitor](https://sentry.io/crons/create/) in Sentry.\n2. Configure check-ins or a heartbeat for your job. Optionally, you can use the `setHeartbeat` parameter to enable heartbeat monitoring when initializing the Cron job.\n\n## Heartbeat\n\nHeartbeat monitoring notifies Sentry of a job's status through one check-in. This setup will only notify you if your job didn't start when expected (missed). If you need to track a job to see if it exceeded its maximum runtime (failed), use check-ins instead. You may also initialize the Cron job with the `setHeartbeat` option to enable heartbeats during its execution."}, {"commit_id": "30c4917541ca79e78d8db743eea026677c18d429", "commit_message": "Update ci-unit-tests.ts", "relevant_doc": "Profiling", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/profiling/index.mdx", "code_summary": "Files updated: scripts/ci-unit-tests.ts\n\n\"Modification to CI unit tests to include integration with Sentry Cloudflare, a service for monitoring and error tracking, expanding browser test packages to include support for Ember, Vue, React, Angular, and Solid applications, enhancing error tracking capabilities.\"", "doc_updates": "supported:\n  - javascript\n  - javascript.cloudflare"}]