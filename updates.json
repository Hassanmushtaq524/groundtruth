[{"commit_id": "dd2c1b65cd5494d252286c99a5c0c7716bbf292f", "commit_message": "Removed setHeartbeat", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nThis commit updates the `CronJobParams` type in `packages/node/src/cron/cron.ts`, removing optional `setHeartbeat` and `context` parameters. The updated type now defines a `CronJobParams` interface with `onTick`, `onComplete`, `start`, `runOnInit`, and `unrefTimeout` properties. This change aims to refine the cron job functionality in a Node.js environment, potentially related to job scheduling or task triggering. The goal may be to improve performance, reduce configuration complexity, or enhance error handling.", "doc_updates": "### CronJobParams\n\nThe `CronJobParams` type defines the parameters for setting up a cron job. The following properties are available:\n\n- `onTick`: *(required)* A function that will be called when the job is executed, passing the provided context.\n- `onComplete`: A function that will be called when the job completes successfully.\n- `start`: A boolean flag to determine whether the job should start automatically.\n- `runOnInit`: A boolean flag to run the job on initialization.\n- `unrefTimeout`: A timeout setting for the job.\n\n*Note*: The optional parameters `setHeartbeat` and `context` have been removed in this version. If required, handling of heartbeats should be integrated separately."}, {"commit_id": "daa65648a6cd3c1890a3b2ba7840a684e7e59a96", "commit_message": "Added setheartbeat", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nThe updated file \"packages/node/src/cron/cron.ts\" modifies the `CronJobParams` type definition to include three new optional parameters: `setHeartbeat`, `context`, and `runOnInit`. This enhancement allows developers to customize the behavior of cron jobs in Node.js, adding features such as heartbeat monitoring, object initialization, and timeouts. It appears to be a backwards-compatible update, as the existing `onTick`, `onComplete`, `start`, `unrefTimeout` properties remain unchanged. This commit likely aims to improve the flexibility and reliability of cron job implementation in Sentry.io.", "doc_updates": "### New CronJobParams Options\n\nThe `CronJobParams` type now includes additional optional parameters:\n\n- `setHeartbeat`: This parameter allows you to enable or disable heartbeat functionality when initializing the cron job.\n- `context`: This parameter can be used to pass additional context to the `onTick` and `onComplete` functions."}, {"commit_id": "f164594c30d28d6bdf1c558ec32121d87aae6d35", "commit_message": "Removed setHeartBeat", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nHere is the description of what was changed and what the file aims to do in the context of Sentry.io:\n\n\"The cron.ts file in the `packages/node/src/cron` directory has undergone modifications to the CronJobParams type definition. Specifically, lines 6-8 were removed, which previously allowed for optional parameters `setHeartbeat`, `context`, and modified type annotations for `onTick`, `onComplete`, and added `runOnInit` and `unrefTimeout` parameters. This change likely refines the job scheduling functionality and implements new features for managing job run timing and synchronization with node initialization.\"", "doc_updates": "## Requirements\n\nTo begin monitoring your recurring, scheduled job:\n\n1. [Create a new monitor](https://sentry.io/crons/create/) in Sentry.\n2. Configure check-ins or a heartbeat for your job.\n\nOptionally, you can skip the first step and [create or update (upsert) a monitor through a check-in](#creating-or-updating-a-monitor-through-a-check-in-optional). See more below.\n\n### Specifying monitor environments (Optional)\n\nWhen sending check-ins to your monitor you may specify the `environment` of the\ncheck-in. This allows you to monitor a single schedule across multiple\nenvironments.\n\nIf you don't specify an environment with your check-ins the default is `production`.\n\n<Alert level=\"info\">\n\nMonitor environments are still early in development. Currently, after a check-in\noccurs for a specific environment, you must continue sending check-ins on\nschedule or delete the monitor environment; otherwise, it will be marked as missed.\n\n</Alert>"}, {"commit_id": "12d1623d90452e91fb28d2763e48acf7ec8031ad", "commit_message": "Added setHeartBeat and context params", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nThis commit adds two new optional parameters, `setHeartbeat` and `context`, to the `CronJobParams` type in the `cron.ts` file. The `setHeartbeat` parameter allows for setting a heartbeat when initializing the object, while `context` provides an optional parameter for the cron job context. This change aims to enhance the functionality of the existing cron job system in Sentry.io, possibly for implementing heartbeat-based scheduling or providing more granular control over cron job initialization. Relevant keywords: heartbeat, cron job, scheduling, initialization.", "doc_updates": "### CronJobParams Definition\n\nThe `CronJobParams` type includes the following optional parameters:\n\n- `setHeartbeat` (boolean | null): An optional parameter for a heartbeat when initializing the object.\n- `context` (unknown): An optional context to be passed during the cron job execution.\n\nThese parameters enhance the functionality of cron jobs, giving you more control over their execution."}, {"commit_id": "3a465ee88def3f4996f2a5ac9e722ce0f6f6d4d1", "commit_message": "Add framerate to canvas", "relevant_doc": "Session Replay", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/session-replay/index.mdx", "code_summary": "Files updated: packages/replay-canvas/src/canvas.ts\n\nThis commit modifies the `ReplayCanvasOptions` interface in `packages/replay-canvas/src/canvas.ts` to include a new property `frameRate`. This allows for control over the frame rate in the canvas, enabling more customization and fine-tuning of the replay canvas. Relevant keywords: ReplayCanvas, options, frame rate, customization.", "doc_updates": "#### 3D and WebGL Canvases\n\nThe canvas recording integration works by exporting the canvas as an image (at a rate of 2 frames per second). However, in order to export images from 3D and WebGL canvases, the integration needs to enable `preserveDrawingBuffer` which can negatively affect canvas performance. If your canvas application is impacted by enabling `preserveDrawingBuffer`, you'll need to enable manual snapshotting and call a `snapshot()` method inside of your re-paint loop. There are two steps to using manual snapshotting:\n\n**Step 1.**\nEnable manual snapshotting when initializing the `ReplayCanvas` integration.\n\n```javascript\nSentry.replayCanvasIntegration({\n  // Enabling the following will ensure your canvas elements are not forced\n  // into `preserveDrawingBuffer`.\n  enableManualSnapshot: true,\n  // Optional: Set the frame rate for canvas recordings (default is 2fps).\n  frameRate: 15, // You can adjust this value as needed\n});\n```\n\n**Step 2**\nCall the following `snapshot()` method inside your application's paint loop. `snapshot()` needs to be called in the same execution loop as the canvas draw commands, otherwise you may be snapshotting empty canvas buffers. This is due to how WebGL works when `preserveDrawingBuffer` is `false`.\n\n```javascript\nfunction paint() {\n  const canvasRef = document.querySelector(\"#my-canvas\");\n  Sentry.getClient().getIntegrationByName(\"ReplayCanvas\").snapshot(canvasRef);\n}\n```"}, {"commit_id": "cd8b5c7f86660ff040c1b25ab6335dd0efcbe6e1", "commit_message": "make to heartbeat monitor", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nDescription: Changes to the `instrumentCron` function in the `cron` package, which appears to instrument a cron job to send check-ins and capture exceptions with Sentry.io. The function now uses `withMonitor` to wrap the cron job execution, capturing check-ins and exceptions, and providing additional metadata such as `monitorSlug` and `status`.", "doc_updates": "### Check-Ins (Recommended)\n\nCheck-in monitoring allows you to track a job's progress by notifying Sentry at the start and end of your job. Instead of manually sending a check-in at the start, the monitoring function now automatically captures check-ins at the conclusion of the job.\n\nSentry will notify you if your job didn't start when expected (missed) or if it exceeded its maximum runtime (failed), with statuses being sent as follows:\n\n- If the job completes successfully, Sentry captures a check-in with status `ok`.\n- If an error occurs during job execution, it captures a check-in with status `error` and throws the error.\n\nFor example, your implemented function might be structured to handle these check-ins automatically."}, {"commit_id": "c1d1849cb1cd47a8dd987f4e690f2a718134751a", "commit_message": "replce cron tick", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nHere is the description of the file:\n\nThis file appears to be a part of the Node.js implementation for monitoring cron jobs in Sentry. The `instrumentCron` function instruments a cron job with a monitor slug, replacing cron names and capturing check-ins with Sentry. It also handles errors and exceptions, capturing them with Sentry and throwing the original error. This file likely aims to help users monitor and troubleshoot their cron jobs in Sentry, providing visibility into the job's execution and status. Relevant keywords: Sentry, Node.js, cron job, monitor, check-in, error tracking.", "doc_updates": "### Check-Ins (Recommended)\n\nCheck-in monitoring allows you to track a job's progress by completing two check-ins: one at the start of your job and another at the end of your job. The check-in at the start of the job now captures the status as `in_progress` and the monitoring slug automatically.\n\nIf your job execution fails:\n\n```bash {tabTitle: cURL}\n# \ud83d\udd34 Notify Sentry your job has failed:\ncurl \"${SENTRY_CRONS}?status=error\"\n```\n\n```http {tabTitle: HTTP}\nGET /api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/?status=error HTTP/1.1\nHost: ___ORG_INGEST_DOMAIN___\n```"}, {"commit_id": "ba28ce4b3bc0685fdd58921a0e47e4fc832ff5be", "commit_message": "Add green style to customs", "relevant_doc": "User Feedback", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/user-feedback/index.mdx", "code_summary": "Files updated: packages/feedback/src/core/createMainStyles.ts\n\nThis commit adds custom theme styles and options to the feedback package. It defines a `feedbackInternalOptions` interface with a `themeCustom` property, which allows users to customize the theme colors. The changes include adding custom green color, accent background, success color, error color, border, box shadow, and outline options. This update enables users to personalize the appearance of the feedback package and provides more flexibility in branding. Relevant documentation may include topics on theme customization, CSS styles, and feedback package configuration.", "doc_updates": "### Customization of Themes\n\nYou can now customize the appearance of the User Feedback widget with a new custom theme option. The default settings include a light green accent background color. \n\nThe following color values can be customized:\n- `foreground`: '#1f2937' (dark navy)\n- `background`: '#f9fafb' (off-white)\n- `accentForeground`: '#ffffff' (white)\n- `accentBackground`: 'rgba(34, 139, 34, 1)' (custom green)\n- `successColor`: '#10b981' (light green)\n- `errorColor`: '#ef4444' (light red)\n- `border`: '2px solid rgba(31, 41, 55, 0.2)' (darker border)\n- `boxShadow`: '0px 6px 30px rgba(0, 0, 0, 0.15)' (stronger shadow)\n- `outline`: '2px auto var(--accent-background)'\n\nYou can apply these styles using the `themeCustom` option during setup."}, {"commit_id": "f73b88005c570bc914a35e45a305b7f0410d28ed", "commit_message": "remove framerate", "relevant_doc": "Session Replay", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/session-replay/index.mdx", "code_summary": "Files updated: packages/replay-canvas/src/canvas.ts\n\nThis patch modifies the ReplayCanvasOptions interface in canvas.ts, removing the frameRate option and its default value of 2. The changes appear to be related to Sentry.io's replay canvas integration, which aims to provide low-level control over the canvas drawing process, enabling manual snapshot management, customization of the canvas size, and quality. The updated code appears to prioritize efficiency and simplicity, potentially reducing unnecessary complexity and improving performance. Relevant keywords: Sentry.io, replay canvas, canvas options, frame rate control.", "doc_updates": "### Canvas Recording\n\n<Alert level=\"warning\">\n\nThere is currently no PII scrubbing in canvas recordings!\n\n</Alert>\n\nIf you want to record HTML canvas elements, you'll need to add an additional integration in your Sentry configuration. The canvas integration is exported from the browser SDK, so no additional package is required. Canvas recording is opt-in and will be tree-shaken from your bundle if it's not being used.\n\n<PlatformContent includePath=\"session-replay/setup-canvas\" />"}]