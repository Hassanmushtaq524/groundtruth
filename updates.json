[{"commit_id": "f164594c30d28d6bdf1c558ec32121d87aae6d35", "commit_message": "Removed setHeartBeat", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nThis commit modifies the `CronJobParams` type definition in the `cron.ts` file within the `packages/node/src/cron` directory. It removes two optional parameters, `setHeartbeat` and `context`, from the type definition, aiming to simplify the initialization of Cron job objects. The updated type definition now focuses on essential parameters such as `onTick`, `onComplete`, `start`, `runOnInit`, and `unrefTimeout`. This change likely aims to improve the overall functionality and usability of Cron jobs in the context of Sentry.io, possibly related to scheduling and execution of tasks. Relevant keywords for search: Cron job, type definition, parameters, initialization, simplicity.", "doc_updates": "## Requirements\n\nTo begin monitoring your recurring, scheduled job:\n\n1. [Create a new monitor](https://sentry.io/crons/create/) in Sentry.\n2. Configure check-ins or a heartbeat for your job.\n\nOptionally, you can skip the first step and [create or update (upsert) a monitor through a check-in](#creating-or-updating-a-monitor-through-a-check-in-optional). See more below.\n\n...\n\nMonitor `monitor_config` parameters:\n\n`schedule_type`:\n\nThe schedule representation for your monitor, either `crontab` or `interval`.\n\n`schedule`:\n\nThe job's schedule :\n\nThis is an object specifying a `schedule_type` of either `crontab` or `interval`. The structure will vary depending on the type:\n\n```json\n{\"type\": \"crontab\", \"value\": \"0 * * * *\"}\n{\"type\": \"interval\", \"value\": \"2\", \"unit\": \"hour\"}\n```\n\n<NOTE>\n\nPlease note that `setHeartbeat` and `context` parameters have been removed from the `CronJobParams` type. \n\n...\n\n```"}, {"commit_id": "12d1623d90452e91fb28d2763e48acf7ec8031ad", "commit_message": "Added setHeartBeat and context params", "relevant_doc": "Crons", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/crons/index.mdx", "code_summary": "Files updated: packages/node/src/cron/cron.ts\n\nThe changes made to the `cron.ts` file in the `node` package's `src/cron` directory affect the definition of `CronJobParams`, a type that represents the parameters for a cron job. The added parameters include `setHeartbeat`, which allows for an optional heartbeat when initializing the object, and `context`, which provides additional context for the cron job.", "doc_updates": "### CronJobParams Type\n\nThe `CronJobParams` type allows for the following parameters when initializing a cron job:\n\n- **onTick**: A function that is called on each execution of the cron job. It can return a value or a Promise.\n- **onComplete**: An optional function that is called when the job completes execution.\n- **start**: An optional boolean that indicates whether to start the job immediately upon creation.\n- **setHeartbeat**: An optional boolean that indicates whether to set up a heartbeat for the job.\n- **context**: An optional value that can hold additional context information to be passed during job execution.\n- **runOnInit**: An optional boolean that determines if the job should run on initialization.\n- **unrefTimeout**: An optional boolean that specifies if to use an unreferenced timeout.\n\n### New Optional Parameters\n\nThe new parameters `setHeartbeat` and `context` provide additional configuration options for more granular control over cron job behavior."}, {"commit_id": "3a465ee88def3f4996f2a5ac9e722ce0f6f6d4d1", "commit_message": "Add framerate to canvas", "relevant_doc": "Session Replay", "doc_url": "https://github.com/getsentry/sentry-docs/blob/master/docs/platforms/javascript/common/session-replay/index.mdx", "code_summary": "Files updated: packages/replay-canvas/src/canvas.ts\n\nHere is the description of what the changed file aims to do in the context of Sentry.io:\n\nThis file updates the Replay Canvas Options interface to add a new property called \"frameRate\" which allows for frame rate control. Additionally, it configures the default frame rate to 2 fps. The change targets the ReplayCanvasIntegration which integrates with the Canvas Manager to enable manual snapshotting and provides error handling functionality. The updated code enhances the replay canvas feature, specifically for error reduction and frame rate control in Sentry.io.", "doc_updates": "### Canvas Recording\n\n<Alert level=\"warning\">\n\nThere is currently no PII scrubbing in canvas recordings!\n\n</Alert>\n\nIf you want to record HTML canvas elements, you'll need to add an additional integration in your Sentry configuration. The canvas integration is exported from the browser SDK, so no additional package is required. Canvas recording is opt-in and will be tree-shaken from your bundle if it's not being used:\n\n<PlatformContent includePath=\"session-replay/setup-canvas\" />\n\n#### 3D and WebGL Canvases\n\nThe canvas recording integration works by exporting the canvas as an image (at a rate of 2 frames per second by default). However, in order to export images from 3D and WebGL canvases, the integration needs to enable `preserveDrawingBuffer` which can negatively affect canvas performance. If your canvas application is impacted by enabling `preserveDrawingBuffer`, you'll need to enable manual snapshotting and call a `snapshot()` method inside of your re-paint loop. Additionally, you can now control the frame rate of the canvas recording by specifying the `frameRate` option.\n\nThere are two steps to using manual snapshotting:\n\n**Step 1.**\nEnable manual snapshotting and set the desired frame rate when initializing the `ReplayCanvas` integration.\n\n```javascript\nSentry.replayCanvasIntegration({\n  // Enabling the following will ensure your canvas elements are not forced\n  // into `preserveDrawingBuffer`.\n  enableManualSnapshot: true,\n  frameRate: 30, // Set your desired frame rate here\n});\n```\n\n**Step 2**\nCall the the following `snapshot()` method inside your application's paint loop. `snapshot()` needs to be called in the same execution loop as the canvas draw commands, otherwise you may be snapshotting empty canvas buffers. This is due to how WebGL works when `preserveDrawingBuffer` is `false`.\n\n```javascript\nfunction paint() {\n  const canvasRef = document.querySelector(\"#my-canvas\");\n  Sentry.getClient().getIntegrationByName(\"ReplayCanvas\").snapshot(canvasRef);\n}\n```"}]